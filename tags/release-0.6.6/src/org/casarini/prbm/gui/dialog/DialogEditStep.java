package org.casarini.prbm.gui.dialog;

import java.awt.*;

import org.casarini.prbm.gui.PRB;
import org.casarini.prbm.gui.component.CTextField;
import org.casarini.prbm.model.Passo;

public class DialogEditStep extends Dialog
{
    Passo p;
    PRB parent;

	public DialogEditStep(PRB parent, Passo p)
	{
		super(parent, true);
		this.parent=parent;
		this.p=p;
       	setBackground(Color.lightGray);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(insets().left + insets().right + 191,insets().top + insets().bottom + 135);
		val_azimut = new CTextField(CTextField.CTF_NUM,3);
		val_azimut.setBounds(insets().left + 114,insets().top + 6,60,18);
		add(val_azimut);
		label1 = new java.awt.Label("Azimut :",Label.RIGHT);
		label1.setBounds(insets().left + 0,insets().top + 12,108,12);
		label1.setFont(new Font("Dialog", Font.PLAIN, 12));
		add(label1);
		label2 = new java.awt.Label("Metri percorsi :",Label.RIGHT);
		label2.setBounds(insets().left + 0,insets().top + 36,108,12);
		label2.setFont(new Font("Dialog", Font.PLAIN, 12));
		add(label2);
		label3 = new java.awt.Label("minuti impiegati :",Label.RIGHT);
		label3.setBounds(insets().left + 0,insets().top + 60,108,12);
		label3.setFont(new Font("Dialog", Font.PLAIN, 12));
		add(label3);
		val_spazio = new CTextField(CTextField.CTF_NUM,6);
		val_spazio.setBounds(insets().left + 114,insets().top + 30,60,18);
		add(val_spazio);
		val_tempo = new CTextField(CTextField.CTF_NUM,5);
		val_tempo.setBounds(insets().left + 114,insets().top + 54,60,18);
		add(val_tempo);
		okbutton = new java.awt.Button();
		okbutton.setActionCommand("button");
		okbutton.setLabel("OK");
		okbutton.setBounds(insets().left + 22,insets().top + 96,60,24);
		okbutton.setFont(new Font("Dialog", Font.BOLD, 12));
		okbutton.setBackground(new Color(12632256));
		add(okbutton);
		okbutton.setEnabled(false);
		cancelbutton = new java.awt.Button();
		cancelbutton.setActionCommand("button");
		cancelbutton.setLabel("Annulla");
		cancelbutton.setBounds(insets().left + 106,insets().top + 96,62,24);
		cancelbutton.setFont(new Font("Dialog", Font.BOLD, 12));
		cancelbutton.setBackground(new Color(12632256));
		add(cancelbutton);
		setTitle("Dati Traccia");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		cancelbutton.addActionListener(lSymAction);
		SymKey aSymKey = new SymKey();
		val_azimut.addKeyListener(aSymKey);
		okbutton.addActionListener(lSymAction);
		val_spazio.addKeyListener(aSymKey);
		val_tempo.addKeyListener(aSymKey);
		//}}
		
		val_azimut.setText(""+p.azimut);
		val_spazio.setText(""+p.metri);
		val_tempo.setText(""+p.tempo);
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


/*	public Dialog1(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}*/

	public void show()
	{
		Rectangle bounds = getParent().bounds();
		Rectangle abounds = bounds();

		move(bounds.x + (bounds.width - abounds.width)/ 2,
			 bounds.y + (bounds.height - abounds.height)/2);

		super.show();
	}
	
	//{{DECLARE_CONTROLS
	CTextField val_azimut;
	java.awt.Label label1;
	java.awt.Label label2;
	java.awt.Label label3;
	CTextField val_spazio;
	CTextField val_tempo;
	java.awt.Button okbutton;
	java.awt.Button cancelbutton;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == DialogEditStep.this)
				DialogEditStep_WindowClosing(event);
		}
	}
	
	void DialogEditStep_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);
		dispose();
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == cancelbutton)
				cancelbutton_Action(event);
			else if (object == okbutton)
				okbutton_Action(event);
		}
	}

	void cancelbutton_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Hide the Dialog
		setVisible(false);
		dispose();
		//}}
	}

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == val_azimut)
				valAzimut_Typed(event);
			else if (object == val_spazio)
				valSpazio_Typed(event);
			else if (object == val_tempo)
				valTempo_Typed(event);
		}
	}

	void okbutton_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		int a,m,t;
		a=Integer.parseInt(val_azimut.getText());
		m=Integer.parseInt(val_spazio.getText());
		t=Integer.parseInt(val_tempo.getText());
		if(a<0||a>360)
		{
		    AttentionDialog d=new AttentionDialog(parent,"ATTENZIONE!","L'angolo deve essere tra 0 e 360");
		    d.display();
		}
		else if(m<1)
		{
		    AttentionDialog d=new AttentionDialog(parent,"ATTENZIONE!","Lo spazio percorso deve essere maggiore di un metro");
		    d.display();
		}
		else
		{
    		p.azimut=Integer.parseInt(val_azimut.getText());
	    	p.metri=Integer.parseInt(val_spazio.getText());
		    p.tempo=Integer.parseInt(val_tempo.getText());
            parent.setPrbModified(true);
       		//{{CONNECTION
	    	// Hide the Dialog
		    setVisible(false);
		    dispose();
		    //}}
		}
	}
	void valAzimut_Typed(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
		
		//{{CONNECTION
		// Enable the Button on condition... Is not enabled?
		okbutton.setEnabled(true);
		//}}
	}


	void valSpazio_Typed(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Enable the Button
		okbutton.setEnabled(true);
		//}}
	}

	void valTempo_Typed(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Enable the Button
		okbutton.setEnabled(true);
		//}}
	}
}
